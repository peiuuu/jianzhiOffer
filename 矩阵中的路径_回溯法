/**
 * 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，
 * 每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。
 * 例如 a b c e s f c s a d e e 矩阵中包含一条字符串"bcced"的路径，
 * 但是矩阵中不包含"abcb"路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。
 */

public class Main
{
    public static void main(String[] args) {
        String smatrix = "ABCESFCSADEE";
        char[] matrix = smatrix.toCharArray();
//        String sstr = "ABCB";
        String sstr = "BCCED";
        char[] str = sstr.toCharArray();
        int rows = 3;
        int cols = 4;
        System.out.println(hasPath(matrix,rows,cols,str));
    }
    public static boolean hasPath(char[] matrix, int rows, int cols, char[] str)
    {
        if (matrix == null || rows <= 0 || cols <= 0 || str == null || str.length == 0)
            return false;
        //visited记录矩阵对应元素是否已经被访问
        boolean[] visited = new boolean[rows * cols];
        //pathLength记录当前判断的元素下标
        int pathLength = 0;
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (hasPathCode(matrix, rows, cols, row, col, str, pathLength, visited))
                    return true;
            }
        }
        return false;
    }

    /*
	 * 判断指定row,col是否为str[pathLength]，如果是，循环判断下一个元素
	 * 否则返回false
	 */
    private static boolean hasPathCode(char[] matrix, int rows, int cols, int row, int col, char[] str, int pathLength,
                                boolean[] visited) {
        if (pathLength == str.length)
            return true;
        if (row >= 0 && row < rows && col >= 0 && col < cols && matrix[row * cols + col] == str[pathLength]
                && visited[row * cols + col] == false) {
            visited[row * cols + col] = true;
            pathLength++;
            if (hasPathCode(matrix, rows, cols, row + 1, col, str, pathLength, visited)
                    || hasPathCode(matrix, rows, cols, row - 1, col, str, pathLength, visited)
                    || hasPathCode(matrix, rows, cols, row, col + 1, str, pathLength, visited)
                    || hasPathCode(matrix, rows, cols, row, col - 1, str, pathLength, visited))
                return true;
            // 把不在该路径上的，且设为true的字符重新设为false
            visited[row * cols + col] = false;
        }
        return false;
    }
}
